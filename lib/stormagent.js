// Generated by CoffeeScript 1.7.1
(function() {
  var EventEmitter, StormAgent,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  EventEmitter = require('events').EventEmitter;

  StormAgent = (function(_super) {
    var async, extend, fs, path, util, validate;

    __extends(StormAgent, _super);

    validate = require('json-schema').validate;

    fs = require('fs');

    path = require('path');

    util = require('util');

    extend = require('util')._extend;

    async = require('async');

    function StormAgent(config) {
      var uuid;
      if (config != null) {
        this.log('constructor called with:\n' + this.inspect(config));
      }
      this.config = require('../package').config;
      if (config != null) {
        this.config = extend(this.config, config);
      }
      this.log("constructor initialized with:\n" + this.inspect(this.config));
      uuid = require('node-uuid');
      this.state = {
        id: null,
        instance: uuid.v4(),
        activated: false,
        running: false
      };
      if (this.functions == null) {
        this.functions = [];
      }
      this.env = require('./environment');
      this.log("setting up directories...");

      /*
      fs=require('fs')
      try
          fs.mkdirSync("#{config.datadir}") unless fs.existsSync("#{config.datadir}")
          fs.mkdirSync("#{config.datadir}/db")  unless fs.existsSync("#{config.datadir}/db")
          fs.mkdirSync("#{config.datadir}/certs") unless fs.existsSync("#{config.datadir}/certs")
      catch error
          util.log "Error in creating data dirs"
       */
      this["import"](module);
      this.on('zappa.ready', (function(_this) {
        return function(include) {
          _this.include = include;
          return _this.state.running = true;
        };
      })(this));
    }

    StormAgent.prototype.newdb = function(filename, callback) {
      var dirty;
      dirty = require('dirty')("" + filename);
      dirty._writeStream.on('error', (function(_this) {
        return function(err) {
          _this.log(err);
          return callback(err);
        };
      })(this));
      return dirty._writeStream.on('open', (function(_this) {
        return function() {
          _this.log('dirty db initialized ok');
          return callback(null, dirty);
        };
      })(this));
    };

    StormAgent.prototype["import"] = function(id) {
      var err, p, pkgconfig, plugin, self, _ref;
      if (id instanceof Object && (id.filename != null)) {
        self = true;
        id = p = id.filename;
        while ((p = path.dirname(p)) && p !== path.sep && !fs.existsSync("" + p + "/package.json")) {
          this.log("checking " + p + "...");
        }
        if (p !== path.sep) {
          id = p;
        }
      }
      try {
        pkgconfig = require("" + id + "/package.json").config;
        if (pkgconfig != null) {
          this.log("[" + id + "] importing... found package.config");
        }
        if (pkgconfig.storm.functions != null) {
          (_ref = this.functions).push.apply(_ref, pkgconfig.storm.functions);
        }
        if (pkgconfig.storm.plugin != null) {
          plugin = require("" + id + "/" + pkgconfig.storm.plugin);
          if (plugin != null) {
            this.log("[" + id + "] importing... found plugin");
          }
          if (this.state.running) {
            this.include(plugin);
          }
          this.on('zappa.ready', (function(_this) {
            return function(include) {
              _this.include = include;
              _this.log("loading storm-compatible plugin API for: " + id);
              return _this.include(plugin);
            };
          })(this));
        }
        this.log("[" + id + "] is a storm compatible module");
      } catch (_error) {
        err = _error;
        this.log(("[" + id + "] is not a storm compatible module: ") + err);
      }
      try {
        if (!((self != null) && self)) {
          return require("" + id);
        }
      } catch (_error) {
        err = _error;
        return this.log(("[" + id + "] importing... failed with: ") + err);
      }
    };

    StormAgent.prototype.run = function(callback) {
      var _agent, _ref;
      _agent = this;
      return _ref = require('zappajs')(this.config.port, function() {
        this.configure((function(_this) {
          return function() {
            _this.use('bodyParser', 'methodOverride', require("passport").initialize(), _this.app.router, 'static');
            _this.set({
              'basepath': '/v1.0'
            });
            return _this.set({
              'agent': _agent
            });
          };
        })(this));
        this.configure({
          development: (function(_this) {
            return function() {
              return _this.use({
                errorHandler: {
                  dumpExceptions: true,
                  showStack: true
                }
              });
            };
          })(this),
          production: (function(_this) {
            return function() {
              return _this.use('errorHandler');
            };
          })(this)
        });
        this.enable('serve jquery', 'minify');
        _agent.emit('zappa.ready', this.include);
        if (callback != null) {
          return callback();
        }
      }), this.app = _ref.app, _ref;
    };

    StormAgent.prototype.execute = function(command, callback) {
      var exec;
      if (!command) {
        return callback(new Error("no valid command for execution!"));
      }
      console.log("executing " + command + "...");
      exec = require('child_process').exec;
      return exec(command, (function(_this) {
        return function(error, stdout, stderr) {
          if (error) {
            return callback(error);
          } else {
            return callback();
          }
        };
      })(this));
    };

    StormAgent.prototype.log = function(message) {
      return util.log("" + this.constructor.name + " - " + message);
    };

    StormAgent.prototype.inspect = util.inspect;

    StormAgent.prototype.activate = function(storm, callback) {
      var count, request;
      request = require('request');
      count = 0;
      return async.until((function(_this) {
        return function() {
          return (_this.state.activated != null) && _this.state.activated;
        };
      })(this), (function(_this) {
        return function(repeat) {
          count++;
          _this.log("attempting activation (try " + count + ")...");
          return async.waterfall([
            function(next) {
              if ((storm != null) && (storm.tracker != null) && (storm.skey != null)) {
                return next(null, storm);
              }
              _this.log("discovering environment...");
              return _this.env.discover(function(storm) {
                if ((storm != null) && (storm.tracker != null) && (storm.skey != null)) {
                  return next(null, storm);
                } else {
                  return next(new Error("unable to discover environment!"));
                }
              });
            }, function(storm, next) {
              if (storm.id != null) {
                return next(null, storm);
              }
              _this.log("looking up agent ID from stormtracker... " + storm.tracker);
              return request("" + storm.tracker + "/skey/" + storm.skey, function(err, res, body) {
                var agent, error;
                try {
                  if (err) {
                    next(err);
                  }
                  switch (res.statusCode) {
                    case 200:
                      agent = JSON.parse(body);
                      storm.id = agent.id;
                      return next(null, storm);
                    default:
                      return next(err);
                  }
                } catch (_error) {
                  error = _error;
                  _this.log("unable to lookup: " + error);
                  return next(error);
                }
              });
            }, function(storm, next) {
              var error, pem;
              if (storm.bolt == null) {
                storm.bolt = {};
              }
              if ((storm.bolt.cert != null) || ((storm.csr != null) && (storm.bolt.key != null))) {
                return next(null, storm);
              }
              _this.log("generating CSR...");
              try {
                pem = require('pem');
                return pem.createCSR({
                  country: "US",
                  state: "CA",
                  locality: "El Segundo",
                  organization: "ClearPath Networks",
                  organizationUnit: "CPN",
                  commonName: storm.id,
                  emailAddress: "" + storm.id + "@intercloud.net"
                }, function(err, res) {
                  if ((res != null) && (res.csr != null)) {
                    _this.log("CSR generation completed: " + _this.inspect(res.csr));
                    storm.csr = res.csr;
                    storm.bolt.key = res.clientKey;
                    return next(null, storm);
                  } else {
                    return new Error("CSR generation failure");
                  }
                });
              } catch (_error) {
                error = _error;
                _this.log("unable to generate CSR request");
                return next(error);
              }
            }, function(storm, next) {
              var form, r;
              if ((storm.bolt.cert != null) && (storm.bolt.key != null)) {
                return next(null, storm);
              }
              _this.log("requesting CSR signing from " + storm.tracker + "...");
              r = request.post("" + storm.tracker + "/" + storm.id + "/csr", function(err, res, body) {
                var error;
                try {
                  switch (res.statusCode) {
                    case 200:
                      storm.bolt.cert = body;
                      return next(null, storm);
                    default:
                      return next(err);
                  }
                } catch (_error) {
                  error = _error;
                  _this.log("unable to post CSR to get signed by stormtracker");
                  return next(error);
                }
              });
              form = r.form();
              return form.append('file', storm.csr);
            }, function(storm, next) {
              if (storm.bolt.ca != null) {
                return next(null, storm);
              }
              _this.log("retrieving stormbolt configs from stormtracker...");
              return request("" + storm.tracker + "/" + storm.id + "/bolt", function(err, res, body) {
                var bolt, error;
                try {
                  switch (res.statusCode) {
                    case 200:
                      bolt = JSON.parse(body);
                      _this.config.bolt = extend(_this.config.bolt, bolt);
                      return next(null, storm);
                    default:
                      return next(err);
                  }
                } catch (_error) {
                  error = _error;
                  _this.log("unable to retrieve stormbolt configs");
                  return next(error);
                }
              });
            }
          ], function(err, storm) {
            if (storm != null) {
              _this.log("activation completed successfully");
              _this.state.activated = true;
              _this.emit("activated", storm);
              return repeat;
            } else {
              _this.log("error during activation: " + err);
              return setTimeout(repeat, _this.config.repeatdelay);
            }
          });
        };
      })(this), (function(_this) {
        return function(err) {
          _this.log("final call on until...");
          return callback(err, _this.state);
        };
      })(this));
    };

    return StormAgent;

  })(EventEmitter);

  module.exports = StormAgent;

  if (typeof gc !== "undefined" && gc !== null) {
    setInterval((function() {
      return gc();
    }), 2000);
  }

}).call(this);
