// Generated by CoffeeScript 1.7.1
(function() {
  var include;

  include = function() {
    var agent, schema, validate;
    validate = require('json-schema').validate;
    schema = {};
    console.log(" what we got", agent, this.agent);
    agent = this.agent;
    this.server.get('/status', function(req, res, next) {
      res.send(agent.status());
      return next();
    });
    this.server.get('/environment', function(req, res, next) {
      var resp;
      resp = agent.env.os();
      console.log(res);
      send(resp);
      return next();
    });
    schema.personality = {
      name: "personality",
      type: "object",
      items: {
        type: "object",
        additionalProperties: false,
        properties: {
          path: {
            type: "string",
            required: true
          },
          contents: {
            type: "string",
            required: true
          },
          postxfer: {
            type: "string"
          }
        }
      }
    };
    return this.server.post('/personality', function(req, res, next) {
      var exec, fs, p, path, result, _fn, _i, _len, _ref;
      console.log('performing schema validation on incoming service JSON');
      result = validate(req.body, schema.personality);
      console.log(result);
      if (!result.valid) {
        return next(new Error("Invalid personality posting!: " + result.errors));
      }
      fs = require('fs');
      exec = require('child_process').exec;
      path = require('path');
      _ref = req.body.personality;
      _fn = function(p) {
        var dir;
        console.log("writing personality to " + p.path + "...");
        dir = path.dirname(p.path);
        if (!path.existsSync(dir)) {
          return exec("mkdir -p " + dir, (function(_this) {
            return function(error, stdout, stderr) {
              if (!error) {
                return fs.writeFile(p.path, new Buffer(p.contents || '', "base64"), function() {
                  if (p.postxfer != null) {
                    return exec("" + p.postxfer, function(error, stdout, stderr) {
                      if (error) {
                        console.log("issuing '" + p.postxfer + "'... stderr: " + stderr);
                      }
                      if (!error) {
                        return console.log("issuing '" + p.postxfer + "'... stdout: " + stdout);
                      }
                    });
                  }
                });
              }
            };
          })(this));
        } else {
          return fs.writeFile(p.path, new Buffer(p.contents || '', "base64"), function() {
            if (p.postxfer != null) {
              return exec("" + p.postxfer, function(error, stdout, stderr) {
                if (error) {
                  console.log("issuing '" + p.postxfer + "'... stderr: " + stderr);
                }
                if (!error) {
                  return console.log("issuing '" + p.postxfer + "'... stdout: " + stdout);
                }
              });
            }
          });
        }
      };
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        p = _ref[_i];
        _fn(p);
      }
      res.send({
        result: 'success'
      });
      return next();
    });
  };

  module.exports.include = include;

}).call(this);
